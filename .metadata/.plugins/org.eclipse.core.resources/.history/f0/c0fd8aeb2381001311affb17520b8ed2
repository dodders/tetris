package com.gd.tetris.model;

import java.lang.reflect.Array;

public class Matrix {

	Tile[][] matrix;
	int rows, cols;
	public enum Rotation { 
		Right, 
		Left; 
	}
	
	@SuppressWarnings("unchecked")
	public Matrix(int rows, int cols) {
		this.rows = rows;
		this.cols = cols;
		this.matrix = new Tile[rows][cols];
	}
	
	public Matrix(Tile[][] m, int rows, int cols) {
		this.matrix = m;
		this.rows = rows;
		this.cols = cols;
	}
	
	public boolean addWithoutCollision(Matrix m, int row, int col) {
		boolean ok = true;
		
		@SuppressWarnings("unchecked")
		Tile[][] save = new Tile[rows][cols];
		array2DCopy(matrix, save); //copy from matrix to save
		for (int r = 0; r < m.rows; r++) {
			for (int c = 0; c < m.cols; c++) {
				if (m.getCell(r, c) != null) {
					if (row + r >= rows || col + c >= cols) {
						ok = false;
						break;
					}
					if (matrix[row + r][col + c] == null) {
						matrix[row + r][col + c] = m.getCell(r, c);
					} else {
						ok = false;
						break;
					}
				}
			}
		}
		if (!ok) {
			array2DCopy(save, matrix); //copy from save to matrix
			return false;
		} else {
			return true;
		}
	}
	
	private void array2DCopy(Tile[][] from, Tile[][] to) {
		for (int i = 0; i < rows; i++) {
			System.arraycopy(from[i], 0, to[i], 0, cols);
		}
	}

	public void add(Matrix m, int row, int col) {
		for (int r = 0; r < m.rows; r++) {
			for (int c = 0; c < m.cols; c++) {
				matrix[row + r][col + c] = m.getCell(r, c);
			}
		}
	}
	
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		for (int r = 0; r < rows; r++) {
			sb.append("{");
			for (int c = 0; c < cols; c++) {
				if (getCell(r, c) != null) {
					sb.append(1);
				} else {
					sb.append(0);
				}
				sb.append(",");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.append("},");
		}
		sb.deleteCharAt(sb.length() - 1);
		sb.append("}");
		return sb.toString();
	}
	
	public Tile getCell(int row, int col) {
		return matrix[row][col];
	}
	
	public void setCell(int row, int col, Tile cell) {
		matrix[row][col] = cell;
	}
	
	public void rotate(Rotation dir) {
		@SuppressWarnings("unchecked")
		Tile[][] m = new Tile[rows][cols];
		if (dir == Rotation.Right) {
			int tcol = cols - 1;
			for (int r = 0; r < rows; r++) {
				int trow = 0;
				for (int c = 0; c < cols; c++) {
					m[trow][tcol] = matrix[r][c];
					trow++;
				}
				tcol--;
			}
		} else {
			int tcol = 0;
			for (int r = 0; r < rows; r++) {
				int trow = rows - 1;
				for (int c = 0; c < cols; c++) {
					m[trow][tcol] = matrix[r][c];
					trow--;
				}
				tcol++;
			}
		}
		this.matrix = m;
	}
	
	public void log(String msg) {
		System.out.println(msg);
	}
}
